AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VpcCIDR: # CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/24
  publicsubnet1CIDR: # CIDR block for public subnet 1
    Type: String
    Default: 10.0.0.0/25
  publicsubnet2CIDR: # CIDR block for public subnet 2
    Type: String
    Default: 10.0.0.130/26
  privatesubnet1CIDR: # CIDR block for private subnet 1
    Type: String
    Default: 10.0.0.192/27
  privatesubnet2CIDR: # CIDR block for private subnet 2
    Type: String
    Default: 10.0.0.224/28
  mykey: # EC2 Key Pair name for SSH access
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap: # Mapping for Availability Zones based on region
    us-east-1:
      AZs:
        - us-east-1a
        - us-east-1b
        - us-east-1c
    us-east-2:
      AZs:
        - us-east-2a
        - us-east-2b
        - us-east-2c

Resources:
  VPC: # Creates a new VPC
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway: # Creates an Internet Gateway
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment: # Attaches the Internet Gateway to the VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1: # Creates Public Subnet 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref publicsubnet1CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet2: # Creates Public Subnet 2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref publicsubnet2CIDR
      MapPublicIpOnLaunch: true

  PrivateSubnet1: # Creates Private Subnet 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref privatesubnet1CIDR

  PrivateSubnet2: # Creates Private Subnet 2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref privatesubnet2CIDR

  PublicRouteTable: # Creates a Route Table for public subnets
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute: # Creates a default route to the Internet Gateway for the public route table
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation: # Associates Public Subnet 1 with the public route table
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation: # Associates Public Subnet 2 with the public route table
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable: # Creates a Route Table for private subnets
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet1RouteTableAssociation: # Associates Private Subnet 1 with the private route table
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation: # Associates Private Subnet 2 with the private route table
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  mysecuritygroup: # Creates a Security Group
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic
      VpcId: !Ref VPC
      SecurityGroupIngress: # Ingress rules
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: # Egress rules
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  ALB: # Creates an Application Load Balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: # Subnets for the ALB
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: # Security Group for the ALB
        - !Ref mysecuritygroup
      Scheme: internet-facing # Makes the ALB publicly accessible
      LoadBalancerAttributes: # ALB attributes
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Type: application # Specifies an Application Load Balancer

  ALBTargetGroup: # Creates an ALB Target Group
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TG1
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: / # Path for health checks
      HealthCheckProtocol: HTTP

  ALBListener: # Creates an ALB Listener
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Default action for the listener
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  MyLaunchTemplate: # Creates an EC2 Launch Template for Auto Scaling
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: testlaunchtempleteforAS
      LaunchTemplateData:
        InstanceType: t2.micro
        KeyName: !Ref mykey
        ImageId: ami-020cba7c55df1f615 # AMI ID for instances launched by ASG
        SecurityGroupIds:
          - !Ref mysecuritygroup
        UserData: # User data to run on instance launch (installs and starts Apache)
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install httpd -y
            sudo systemctl start httpd
            sudo systemctl enable httpd

  AutoScalingGroup: # Creates an Auto Scaling Group
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ALB # Ensures ALB is created before ASG
    Properties:
      VPCZoneIdentifier: # Subnets where instances will be launched by ASG
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate: # References the launch template
        LaunchTemplateSpecification:
          LaunchTemplateId: !GetAtt MyLaunchTemplate.LaunchTemplateId
          Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: '2' # Minimum number of instances in the ASG
      MaxSize: '4' # Maximum number of instances in the ASG
      DesiredCapacity: '2' # Desired number of instances initially
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB # Health check type using ALB
      TargetGroupARNs: # Attaches ASG instances to the ALB Target Group
        - !Ref ALBTargetGroup
      Tags: # Tags for instances launched by ASG
        - Key: Name
          Value: WebServer
          PropagateAtLaunch: true

Outputs:
  LoadBalancerDNS: # Output for the ALB DNS name
    Description: "Application Load Balancer DNS"
    Value: !GetAtt ALB.DNSName